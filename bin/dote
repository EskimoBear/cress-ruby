#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require_relative '../lib/dote.rb'
require_relative '../lib/cli/messages.rb'

gemspec_path = File.expand_path('../../dote.gemspec', __FILE__)
gemspec = Gem::Specification::load(gemspec_path)

program :name, gemspec.name.to_s
program :version, gemspec.version.to_s
program :description, 'Compiler for the Dote language'
program :help_formatter, :compact

default_command :usage

command :usage do |c|
  c.action do
    say CLI::Messages::USAGE
  end
end

command 'fmt' do |c|
  c.syntax = 'dote fmt [input_file] [output_file]'
  c.summary = 'Formats Dote programs'
  c.description = 'Formats Dote programs passed as input_file,'\
                  ' rewriting input_file in the process.'\
                  ' If an output_file is passed as well the formatted'\
                  ' program is written to output_file.'
  c.action do |args, options|
    def parse_file_paths(args)
      {:input_file => args.first,
        :output_file => args[1]}
    end

    files = parse_file_paths(args)
      if files[:input_file]
        program = File.open(files[:input_file]).read
        grammar = Dote::DoteGrammars.dote_fmt
        tree = Dote.source_to_tree(program, grammar)
        if files[:output_file].nil?
          grammar.generate_source(tree,
                                  File.dirname(files[:input_file]),
                                  File.basename(files[:input_file]))
        else
          if File.extname(files[:output_file]).empty?
            files[:output_file] = files[:output_file].dup.concat(".dt")
          end
          grammar.generate_source(tree,
                                  File.dirname(files[:output_file]),
                                  File.basename(files[:output_file]))
        end
      end
    end
  end
